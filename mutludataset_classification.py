# -*- coding: utf-8 -*-
"""mutluDataset-classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dMP0JEM8-bKaQ9tTOb9bMWgic_PMnXgR
"""

!mkdir -p drive
!google-drive-ocamlfuse drive

from google.colab import drive
drive.mount('/content/drive')

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn import tree
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB

"""FUNCTIONS"""

def show_results(classifierName):
  accuracy = accuracy_score(y_test, y_pred)
  print("Accuracy: %.2f%%" % (accuracy * 100.0))
  print(" ")

  cm = confusion_matrix(y_test, y_pred)

  disp = ConfusionMatrixDisplay(confusion_matrix=cm,
                                display_labels=classifierName.classes_)
  disp.plot()

  plt.show()

"""DATASET"""

data = pd.read_csv('drive/MyDrive/TEZ/autism-code/DuyguDurumlarÄ±_veriseti/1_MutluDataSET.csv')
# To display the top 5 rows
data.head(5)

data = data.drop(['Participant'], axis=1)
data

target = 'Class'
features_list = list(data.columns)
features_list.remove(target)

y = data.pop('Class')

X_train, X_test, y_train, y_test = train_test_split(data, y, test_size=0.2, random_state=33)

print("Training records: {}".format(X_train.shape[0]))
print("Testing records: {}".format(X_test.shape[0]))

scaler = StandardScaler().fit(X_train)
X_train_norm = scaler.transform(X_train)
X_test_norm = scaler.transform(X_test)

"""DECISION TREE"""

classifierDT = tree.DecisionTreeClassifier()
classifierDT.fit(X_train, y_train)

y_pred = classifierDT.predict(X_test)

show_results(classifierDT)

"""NAIVE BAYES"""

classifierNB = GaussianNB()
classifierNB.fit(X_train, y_train)

y_pred = classifierNB.predict(X_test)

show_results(classifierNB)

"""KNN"""

classifierKNN = KNeighborsClassifier(n_neighbors=3)
classifierKNN.fit(X_train, y_train)

y_pred = classifierKNN.predict(X_test)

show_results(classifierKNN)

